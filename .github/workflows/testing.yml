name: CI
on:
  push:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: python:3.11
      env:
        POSTGRES_DB: gidratop
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: postgres
        POSTGRES_PORT: 5432

        TOKEN_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        COOKIE_DOMAIN: localhost

        REDIS_HOST: redis
        REDIS_PORT: 6379
        REDIS_PASSWORD: default

        RABBITMQ_USER: guest
        RABBITMQ_PASS: guest
        RABBITMQ_PORT: 5672
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_EXCHANGE: gidrator

        AWS_SERVICE_NAME: s3
        AWS_REGION: ru-central1
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        SMTP_PORT: 587
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: gidratop
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        env:
          REDIS_PASSWORD: default
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="/root/.cargo/bin:$PATH"

    - name: Create test configuration file
      run: |
        cat > .env.test << EOF
        POSTGRES_USER=${POSTGRES_USER}
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        POSTGRES_HOST=${POSTGRES_HOST}
        POSTGRES_PORT=${POSTGRES_PORT}
        POSTGRES_DB=${POSTGRES_DB}

        TOKEN_SECRET_KEY=${TOKEN_SECRET_KEY}
        COOKIE_DOMAIN=${COOKIE_DOMAIN}

        ALLOW_ORIGINS=["http://localhost:3000"]
        ALLOW_CREDENTIALS=true
        ALLOW_METHODS=["*"]
        ALLOW_HEADERS=["*"]

        REDIS_HOST=${REDIS_HOST}
        REDIS_PORT=${REDIS_PORT}
        REDIS_PASSWORD=${REDIS_PASSWORD}

        RABBITMQ_USER=${RABBITMQ_USER}
        RABBITMQ_PASS=${RABBITMQ_PASS}
        RABBITMQ_PORT=${RABBITMQ_PORT}
        RABBITMQ_HOST=${RABBITMQ_HOST}
        RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}

        AWS_SERVICE_NAME=${AWS_SERVICE_NAME}
        AWS_REGION=${AWS_REGION}
        AWS_ENDPOINT=${AWS_ENDPOINT}
        AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

        SMTP_PORT=${SMTP_PORT}
        SMTP_USERNAME=${SMTP_USERNAME}
        SMTP_PASSWORD=${SMTP_PASSWORD}

        LOGGING__LOG_FORMAT=pretty
        LOGGING__LOG_FILE=./logs/app.log
        LOGGING__LEVEL=DEBUG
        TEST_MODE=true
        EOF
        
        echo "Файл конфигурации для тестов создан"

    - name: Create logs directory
      run: mkdir -p logs

    - name: Install Dependencies
      run: |
        export PATH="/root/.cargo/bin:$PATH"
        uv sync

    - name: Run Tests
      run: |
        uv run python -m pytest -v -s