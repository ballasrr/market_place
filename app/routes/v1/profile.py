from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.dependencies import get_db_session
from app.core.security.auth import get_current_user
from app.routes.base import BaseRouter
from app.schemas import (CurrentUserSchema, PasswordFormSchema,
                         PasswordUpdateResponseSchema, ProfileResponseSchema,
                         ProfileUpdateSchema)
from app.schemas.v1.auth.exception import TokenMissingResponseSchema
from app.schemas.v1.profile.exception import (
    InvalidCurrentPasswordResponseSchema, ProfileNotFoundResponseSchema,
    UserNotFoundResponseSchema)
from app.services.v1.profile.service import ProfileService


class ProfileRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="profile", tags=["Profile"])

    def configure(self):
        @self.router.get(path="", response_model=ProfileResponseSchema)
        async def get_profile(
            session: AsyncSession = Depends(get_db_session),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> ProfileResponseSchema:
            """
            ## üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **ProfileResponseSchema**: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await ProfileService(session).get_profile(current_user)

        @self.router.put(
            path="",
            response_model=ProfileResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": ProfileNotFoundResponseSchema,
                    "description": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        async def update_profile(
            profile_data: ProfileUpdateSchema,
            session: AsyncSession = Depends(get_db_session),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> ProfileResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **phone**: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **ProfileResponseSchema**: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await ProfileService(session).update_profile(
                current_user, profile_data
            )

        @self.router.put(
            path="/password",
            response_model=PasswordUpdateResponseSchema,
            responses={
                400: {
                    "model": InvalidCurrentPasswordResponseSchema,
                    "description": "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω",
                },
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": UserNotFoundResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        async def update_password(
            password_data: PasswordFormSchema,
            session: AsyncSession = Depends(get_db_session),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> PasswordUpdateResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **old_password**: –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            * **new_password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            * **confirm_password**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            """
            return await ProfileService(session).update_password(
                current_user, password_data
            )
